import json
import sys

rules = [
    {"nonTerminal": "S", "terminal": "AB , BC"},
    {"nonTerminal": "A", "terminal": "BA , a"},
    {"nonTerminal": "B", "terminal": "CC , b"},
    {"nonTerminal": "C", "terminal": "AB , a"},
]

words = "baaba"


def cyk(grammar, word):
    # Initialize the table
    wordLen = len(word)
    table = [[set() for j in range(wordLen - i)] for i in range(wordLen)]

    # Fill in the table
    for i, letter in enumerate(word):
        for rule in grammar:
            terminals = rule["terminal"].replace(" ", "").split(",")
            if letter in terminals:
                table[0][i].add(rule["nonTerminal"])

    for level in range(1, wordLen):
        for rowCell in range(wordLen - level):
            for cell in range(level):
                for rule in grammar:
                    terminals = rule["terminal"].replace(" ", "").split(",")
                    for terminal in terminals:
                        if len(terminal) == 2:
                            if terminal[0] in table[cell][rowCell] and terminal[1] in table[level - cell - 1][rowCell + cell + 1]:
                                table[level][rowCell].add(rule["nonTerminal"])

    # print table
    for row in table:
        print(row)
    # Check if the start symbol is in the top right cell of the table
    return "S" in table[-1][0]


def lambda_handler(event, context):
    # Parse the input
    input_data = json.loads(event['body'])
    grammar = input_data['grammar']
    word = input_data['word']

    # Check if the word can be generated by the CFG
    result = cyk(grammar, word)

    # Return the result
    return {
        'statusCode': 200,
        'body': json.dumps({
            'result': result
        })
    }


print(cyk(rules, words))
